 --1. Số lượng đơn hàng và số lượng khách hàng mỗi tháng --

select 
count(order_id) as total_order,
count(user_Id) as total_user ,
FORMAT_DATE('%Y-%m',created_at) as year_month
from bigquery-public-data.thelook_ecommerce.orders
where FORMAT_DATE('%Y-%m',created_at) between '2019-01' and '2022-04'
group by 3
order by 3 asc

-- Nhận xét: số lượng total_order có dấu hiệu tăng qua từng năm. Nên giữ vững phong độ và ra nhiều campaign marketing để giữ chân khách hàng cũ và thu hút khách hàng mới  --

--2. Giá trị đơn hàng trung bình (AOV) và số lượng khách hàng mỗi tháng --
with t1 as (
select 
extract(year from a.created_at) as year,
extract(month from a.created_at) as month,
count(distinct a.user_id) as distinct_user,
sum(b.sale_price) as total_value,
count(a.order_id) as total_orders
from bigquery-public-data.thelook_ecommerce.orders as a
join bigquery-public-data.thelook_ecommerce.order_items as b
on a.order_id = b.order_id
where  a.created_at between '2019-01-01' and '2022-04-30'
group by 1 ,2)

select 
format_date('%Y-%m',date(year,month,1)) as month_year,
round(total_value/total_orders,2) as average_order_value
FROM t1
order by 1 asc

-- Nhận xét: AOV ở năm 2019 lại lớn hơn sao với năm 2020 và 2021 mặc dù số lượng totaL_order ở năm 2019 lại < năm 2020,2021--



-- 3. Tìm các khách hàng có trẻ tuổi nhất và lớn tuổi nhất theo từng giới tính ( Từ 1/2019-4/2022) --


with t1 as
(select
first_name,
last_name,
gender,
age,
ROW_NUMBER() OVER (PARTITION BY gender ORDER BY age ASC) as youngest_rank,
 ROW_NUMBER() OVER (PARTITION BY gender ORDER BY age DESC) as oldest_rank
from bigquery-public-data.thelook_ecommerce.users
where created_at between '2019-01-01' and '2022-04-30'
group by 1,2,3,4)

select
first_name,
last_name,
gender,
age,
'youngest' as tag
from t1
where youngest_rank =1

union all

select
first_name,
last_name,
gender,
age,
'oldest' as tag
from t1
where oldest_rank =1


--4.Top 5 sản phẩm mỗi tháng. --


WITH t1 AS (
  SELECT 
    EXTRACT(YEAR FROM a.created_at) AS year,
    EXTRACT(MONTH FROM a.created_at) AS month,
    a.created_at AS order_date,
    b.product_id AS product_id,
    b.product_name AS product_name,
    ROUND(SUM(a.sale_price), 2) AS sales,
    ROUND(SUM(b.cost), 2) AS cost,
    ROUND(SUM(a.sale_price - b.cost), 2) AS profit,
    DENSE_RANK() OVER (PARTITION BY EXTRACT(YEAR FROM a.created_at), EXTRACT(MONTH FROM a.created_at) ORDER BY SUM(a.sale_price - b.cost) DESC) AS dense_rank
  FROM 
    bigquery-public-data.thelook_ecommerce.order_items a
  JOIN 
    bigquery-public-data.thelook_ecommerce.inventory_items b
  ON 
    a.product_id = b.product_id
  GROUP BY 
    1, 2, 3, 4, 5
)

SELECT 
  FORMAT_DATE('%Y-%m', DATE(year, month, 1)) AS month_year,
  product_id,
  product_name,
  sales,
  cost,
  profit
FROM 
  t1
WHERE 
  dense_rank <= 5

--5.Doanh thu tính đến thời điểm hiện tại trên mỗi danh mục --
with t1 as
(select 
a.category as product_category,
sum(b.sale_price) * count(order_id) as revenue,
date(b.created_at) as date
from bigquery-public-data.thelook_ecommerce.products a
join bigquery-public-data.thelook_ecommerce.order_items b
on a.id = b.id
where
 DATE(created_at) >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH)
    AND DATE(created_at) <= CURRENT_DATE()
GROUP BY
    1,3
order by 3)

SELECT
  date,
  product_category,
  revenue
FROM
  t1
ORDER BY
  date, product_category
